// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/login": {
            "post": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "login"
                ],
                "summary": "Creates an auth token",
                "parameters": [
                    {
                        "description": "user email",
                        "name": "email",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Email"
                        }
                    },
                    {
                        "description": "user password",
                        "name": "password",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Password"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    }
                }
            }
        },
        "/tasks": {
            "get": {
                "description": "Managers can: get all tasks",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Get tasks",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Task"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "description": "Technicians can: create tasks",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Creates a task",
                "parameters": [
                    {
                        "description": "task summary (max length: 2500)",
                        "name": "summary",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Summary"
                        }
                    },
                    {
                        "description": "task date",
                        "name": "date",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/models.Date"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Task"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/tasks/id": {
            "get": {
                "description": "Managers can: get all tasks\nTechnicians can: get only their tasks",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Get task by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "task id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Task"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "put": {
                "description": "Technicians can: update only their tasks",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Updates task by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "task id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "task summary (max length: 2500)",
                        "name": "summary",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Summary"
                        }
                    },
                    {
                        "description": "task date",
                        "name": "date",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/models.Date"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Task"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "delete": {
                "description": "Managers can: delete all tasks",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Deletes a task by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "task id",
                        "name": "id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/users": {
            "get": {
                "description": "Managers can: get all technician users",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Returns all technician users",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.User"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "description": "Technicians can: create users",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Creates a user",
                "parameters": [
                    {
                        "description": "user nickname",
                        "name": "nickname",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Nickname"
                        }
                    },
                    {
                        "description": "user email",
                        "name": "email",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Email"
                        }
                    },
                    {
                        "description": "user password",
                        "name": "password",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Password"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/users/id": {
            "get": {
                "description": "Managers can: get all technician users and themselves\nTechnicians can: get themselves",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Returns an user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "put": {
                "description": "Technicians can: update their tasks",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Updates an user by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "user nickname",
                        "name": "nickname",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Nickname"
                        }
                    },
                    {
                        "description": "user email",
                        "name": "email",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Email"
                        }
                    },
                    {
                        "description": "user password",
                        "name": "password",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Password"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "delete": {
                "description": "Managers can: delete themselves\nTechnicians can: delete themselves",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Deletes a user by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user id",
                        "name": "id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        }
    },
    "definitions": {
        "models.Date": {
            "type": "object",
            "properties": {
                "date": {
                    "type": "string",
                    "example": "2023-01-27T20:03:44Z"
                }
            }
        },
        "models.Email": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "steve@email.com"
                }
            }
        },
        "models.Nickname": {
            "type": "object",
            "properties": {
                "nickname": {
                    "type": "string",
                    "example": "Steve"
                }
            }
        },
        "models.Password": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string",
                    "example": "password"
                }
            }
        },
        "models.Summary": {
            "type": "object",
            "properties": {
                "summary": {
                    "type": "string",
                    "example": "Task summary"
                }
            }
        },
        "models.Task": {
            "type": "object",
            "properties": {
                "author_id": {
                    "type": "integer",
                    "example": 3
                },
                "created_at": {
                    "type": "string",
                    "example": "2023-01-27T20:03:44Z"
                },
                "date": {
                    "type": "string",
                    "example": "2023-01-27T20:03:44Z"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "summary": {
                    "type": "string",
                    "example": "Task summary"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2023-01-27T20:03:44Z"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2023-01-27T20:03:44Z"
                },
                "email": {
                    "type": "string",
                    "example": "steve@email.com"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "nickname": {
                    "type": "string",
                    "example": "Steve"
                },
                "password": {
                    "type": "string",
                    "example": "password"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2023-01-27T20:03:44Z"
                },
                "user_type": {
                    "type": "string",
                    "example": "technician"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
